{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u0439\\u0434\\u0430\\u0440\\u0431\\u0435\\u043A\\\\Documents\\\\SpringBootProjects\\\\frontend-react\\\\src\\\\components\\\\CreateSongForm.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { getUser } from \"../helpers/auth_helper\";\nconst CreateSongForm = () => {\n  const [songRequest, setSongRequest] = useState({\n    title: '',\n    artistId: '',\n    albumId: '',\n    length: '',\n    genre: ''\n  });\n  const [songFile, setSongFile] = useState(null);\n  const [imageFile, setImageFile] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setSongRequest({\n      ...songRequest,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    const formData = new FormData();\n    formData.append('songFile', songFile);\n    formData.append('imageFile', imageFile);\n\n    // Merge songRequest and other fields into formData\n    for (const key in songRequest) {\n      formData.append(key, songRequest[key]);\n    }\n    try {\n      const response = await callApiPost(formData);\n      console.log('Song created successfully:', response.data);\n      setIsLoading(false);\n      setErrorMessage('');\n      // Handle success or display a success message to the user\n    } catch (error) {\n      setIsLoading(false);\n      if (error.response && error.response.data) {\n        setErrorMessage(error.response.data);\n      } else {\n        setErrorMessage('Failed to create song. Please try again later.');\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    value: songRequest.title,\n    onChange: handleChange,\n    placeholder: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"songFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Select Song File:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: e => setSongFile(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"imageFile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, \"Select Image File:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: e => setImageFile(e.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, isLoading ? 'Creating...' : 'Create Song'), errorMessage && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 30\n    }\n  }, errorMessage));\n};\nexport default CreateSongForm;\nconst callApiPost = data => {\n  return getUser().then(user => {\n    if (user && user.access_token) {\n      const headers = {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${user.access_token}`\n      };\n      return axios.post('http://localhost:8083/songs', data, {\n        headers\n      });\n    } else {\n      throw new Error('User is not logged in');\n    }\n  });\n};","map":{"version":3,"names":["React","useState","axios","getUser","CreateSongForm","songRequest","setSongRequest","title","artistId","albumId","length","genre","songFile","setSongFile","imageFile","setImageFile","isLoading","setIsLoading","errorMessage","setErrorMessage","handleChange","e","name","value","target","handleSubmit","preventDefault","formData","FormData","append","key","response","callApiPost","console","log","data","error","createElement","onSubmit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","htmlFor","files","disabled","then","user","access_token","headers","Authorization","post","Error"],"sources":["C:/Users/Айдарбек/Documents/SpringBootProjects/frontend-react/src/components/CreateSongForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport {getUser} from \"../helpers/auth_helper\";\r\n\r\nconst CreateSongForm = () => {\r\n    const [songRequest, setSongRequest] = useState({\r\n        title: '',\r\n        artistId: '',\r\n        albumId: '',\r\n        length: '',\r\n        genre: '',\r\n    });\r\n\r\n    const [songFile, setSongFile] = useState(null);\r\n    const [imageFile, setImageFile] = useState(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setSongRequest({\r\n            ...songRequest,\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        setIsLoading(true);\r\n\r\n        const formData = new FormData();\r\n        formData.append('songFile', songFile);\r\n        formData.append('imageFile', imageFile);\r\n\r\n        // Merge songRequest and other fields into formData\r\n        for (const key in songRequest) {\r\n            formData.append(key, songRequest[key]);\r\n        }\r\n\r\n        try {\r\n            const response = await callApiPost(formData);\r\n            console.log('Song created successfully:', response.data);\r\n            setIsLoading(false);\r\n            setErrorMessage('');\r\n            // Handle success or display a success message to the user\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n            if (error.response && error.response.data) {\r\n                setErrorMessage(error.response.data);\r\n            } else {\r\n                setErrorMessage('Failed to create song. Please try again later.');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={songRequest.title}\r\n                onChange={handleChange}\r\n                placeholder=\"Title\"\r\n            />\r\n            {/* Other input fields for artistId, albumId, length, genre */}\r\n            {/* ... */}\r\n            <label htmlFor=\"songFile\">Select Song File:</label>\r\n            <input type=\"file\" onChange={(e) => setSongFile(e.target.files[0])} />\r\n            <label htmlFor=\"imageFile\">Select Image File:</label>\r\n            <input type=\"file\" onChange={(e) => setImageFile(e.target.files[0])} />\r\n            <button type=\"submit\" disabled={isLoading}>\r\n                {isLoading ? 'Creating...' : 'Create Song'}\r\n            </button>\r\n            {errorMessage && <p>{errorMessage}</p>}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CreateSongForm;\r\n\r\nconst callApiPost = (data) => {\r\n    return getUser().then((user) => {\r\n        if (user && user.access_token) {\r\n            const headers = {\r\n                'Content-Type': 'multipart/form-data',\r\n                Authorization: `Bearer ${user.access_token}`,\r\n            };\r\n            return axios.post('http://localhost:8083/songs', data, { headers });\r\n        } else {\r\n            throw new Error('User is not logged in');\r\n        }\r\n    });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}